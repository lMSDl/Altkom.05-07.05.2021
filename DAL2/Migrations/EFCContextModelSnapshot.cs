// <auto-generated />
using System;
using DAL2.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL2.Migrations
{
    [DbContext(typeof(EFCContext))]
    partial class EFCContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Polish_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL2.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("DAL2.Models.AddressCompany", b =>
                {
                    b.Property<int>("AddressesId")
                        .HasColumnType("int");

                    b.Property<int>("CompaniesId")
                        .HasColumnType("int");

                    b.HasKey("AddressesId", "CompaniesId");

                    b.HasIndex(new[] { "CompaniesId" }, "IX_AddressCompany_CompaniesId");

                    b.ToTable("AddressCompany");
                });

            modelBuilder.Entity("DAL2.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OwnerId" }, "IX_Company_OwnerId")
                        .IsUnique();

                    b.ToTable("Company");
                });

            modelBuilder.Entity("DAL2.Models.LargeCompany", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfEmployees")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LargeCompany");
                });

            modelBuilder.Entity("DAL2.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<int>("ClassType")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(475)
                        .HasColumnType("nvarchar(475)")
                        .HasComputedColumnSql("(([LastName]+' ')+[FirstName])", false);

                    b.Property<int?>("IndexNumber")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                    b.Property<decimal>("Pesel")
                        .HasColumnType("decimal(11,0)")
                        .HasColumnName("PESEL");

                    b.Property<string>("SchoolName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Pesel" }, "AK_People_PESEL")
                        .IsUnique();

                    b.HasIndex(new[] { "AddressId" }, "IX_People_AddressId");

                    b.HasIndex(new[] { "BirthDate" }, "IX_People_BirthDate")
                        .IsUnique()
                        .HasFilter("[BirthDate] IS NOT NULL");

                    b.HasIndex(new[] { "FirstName", "LastName" }, "Index_FirstLastName");

                    b.ToTable("People", "efc");
                });

            modelBuilder.Entity("DAL2.Models.SmallCompany", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SmallCompany");
                });

            modelBuilder.Entity("DAL2.Models.AddressCompany", b =>
                {
                    b.HasOne("DAL2.Models.Address", "Addresses")
                        .WithMany("AddressCompanies")
                        .HasForeignKey("AddressesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL2.Models.Company", "Companies")
                        .WithMany("AddressCompanies")
                        .HasForeignKey("CompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Addresses");

                    b.Navigation("Companies");
                });

            modelBuilder.Entity("DAL2.Models.Company", b =>
                {
                    b.HasOne("DAL2.Models.Person", "Owner")
                        .WithOne("Company")
                        .HasForeignKey("DAL2.Models.Company", "OwnerId")
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DAL2.Models.LargeCompany", b =>
                {
                    b.HasOne("DAL2.Models.Company", "IdNavigation")
                        .WithOne("LargeCompany")
                        .HasForeignKey("DAL2.Models.LargeCompany", "Id")
                        .IsRequired();

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("DAL2.Models.Person", b =>
                {
                    b.HasOne("DAL2.Models.Address", "Address")
                        .WithMany("People")
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("DAL2.Models.SmallCompany", b =>
                {
                    b.HasOne("DAL2.Models.Company", "IdNavigation")
                        .WithOne("SmallCompany")
                        .HasForeignKey("DAL2.Models.SmallCompany", "Id")
                        .IsRequired();

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("DAL2.Models.Address", b =>
                {
                    b.Navigation("AddressCompanies");

                    b.Navigation("People");
                });

            modelBuilder.Entity("DAL2.Models.Company", b =>
                {
                    b.Navigation("AddressCompanies");

                    b.Navigation("LargeCompany");

                    b.Navigation("SmallCompany");
                });

            modelBuilder.Entity("DAL2.Models.Person", b =>
                {
                    b.Navigation("Company");
                });
#pragma warning restore 612, 618
        }
    }
}
